/* 516366da1575ee5af45d7bbb64f5297f081f9f14
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  AWSTimestamp: number;
  AWSDateTime: string;
  AWSEmail: string;
  AWSPhone: string;
  AWSDate: string;
  AWSIPAddress: string;
  AWSJSON: string;
  AWSTime: string;
  AWSURL: string;
};

export type Query = {
  __typename?: 'Query';
  getUser?: Maybe<User>;
  listUsers?: Maybe<ModelUserConnection>;
  syncUsers?: Maybe<ModelUserConnection>;
};


export type QueryGetUserArgs = {
  id: Scalars['ID'];
};


export type QueryListUsersArgs = {
  filter?: InputMaybe<ModelUserFilterInput>;
  id?: InputMaybe<Scalars['ID']>;
  limit?: InputMaybe<Scalars['Int']>;
  nextToken?: InputMaybe<Scalars['String']>;
  sortDirection?: InputMaybe<ModelSortDirection>;
};


export type QuerySyncUsersArgs = {
  filter?: InputMaybe<ModelUserFilterInput>;
  lastSync?: InputMaybe<Scalars['AWSTimestamp']>;
  limit?: InputMaybe<Scalars['Int']>;
  nextToken?: InputMaybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  _deleted?: Maybe<Scalars['Boolean']>;
  _lastChangedAt: Scalars['AWSTimestamp'];
  _version: Scalars['Int'];
  createdAt: Scalars['AWSDateTime'];
  email: Scalars['AWSEmail'];
  id: Scalars['ID'];
  name: Scalars['String'];
  phone?: Maybe<Scalars['AWSPhone']>;
  updatedAt: Scalars['AWSDateTime'];
};

export type ModelUserFilterInput = {
  and?: InputMaybe<Array<InputMaybe<ModelUserFilterInput>>>;
  createdAt?: InputMaybe<ModelStringInput>;
  email?: InputMaybe<ModelStringInput>;
  id?: InputMaybe<ModelIdInput>;
  name?: InputMaybe<ModelStringInput>;
  not?: InputMaybe<ModelUserFilterInput>;
  or?: InputMaybe<Array<InputMaybe<ModelUserFilterInput>>>;
  phone?: InputMaybe<ModelStringInput>;
  updatedAt?: InputMaybe<ModelStringInput>;
};

export type ModelStringInput = {
  attributeExists?: InputMaybe<Scalars['Boolean']>;
  attributeType?: InputMaybe<ModelAttributeTypes>;
  beginsWith?: InputMaybe<Scalars['String']>;
  between?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contains?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  ge?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  le?: InputMaybe<Scalars['String']>;
  lt?: InputMaybe<Scalars['String']>;
  ne?: InputMaybe<Scalars['String']>;
  notContains?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<ModelSizeInput>;
};

export enum ModelAttributeTypes {
  Null = '_null',
  Binary = 'binary',
  BinarySet = 'binarySet',
  Bool = 'bool',
  List = 'list',
  Map = 'map',
  Number = 'number',
  NumberSet = 'numberSet',
  String = 'string',
  StringSet = 'stringSet'
}

export type ModelSizeInput = {
  between?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  eq?: InputMaybe<Scalars['Int']>;
  ge?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  le?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  ne?: InputMaybe<Scalars['Int']>;
};

export type ModelIdInput = {
  attributeExists?: InputMaybe<Scalars['Boolean']>;
  attributeType?: InputMaybe<ModelAttributeTypes>;
  beginsWith?: InputMaybe<Scalars['ID']>;
  between?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  contains?: InputMaybe<Scalars['ID']>;
  eq?: InputMaybe<Scalars['ID']>;
  ge?: InputMaybe<Scalars['ID']>;
  gt?: InputMaybe<Scalars['ID']>;
  le?: InputMaybe<Scalars['ID']>;
  lt?: InputMaybe<Scalars['ID']>;
  ne?: InputMaybe<Scalars['ID']>;
  notContains?: InputMaybe<Scalars['ID']>;
  size?: InputMaybe<ModelSizeInput>;
};

export enum ModelSortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type ModelUserConnection = {
  __typename?: 'ModelUserConnection';
  items: Array<Maybe<User>>;
  nextToken?: Maybe<Scalars['String']>;
  startedAt?: Maybe<Scalars['AWSTimestamp']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser?: Maybe<User>;
  deleteUser?: Maybe<User>;
  updateUser?: Maybe<User>;
};


export type MutationCreateUserArgs = {
  condition?: InputMaybe<ModelUserConditionInput>;
  input: CreateUserInput;
};


export type MutationDeleteUserArgs = {
  condition?: InputMaybe<ModelUserConditionInput>;
  input: DeleteUserInput;
};


export type MutationUpdateUserArgs = {
  condition?: InputMaybe<ModelUserConditionInput>;
  input: UpdateUserInput;
};

export type ModelUserConditionInput = {
  and?: InputMaybe<Array<InputMaybe<ModelUserConditionInput>>>;
  createdAt?: InputMaybe<ModelStringInput>;
  email?: InputMaybe<ModelStringInput>;
  name?: InputMaybe<ModelStringInput>;
  not?: InputMaybe<ModelUserConditionInput>;
  or?: InputMaybe<Array<InputMaybe<ModelUserConditionInput>>>;
  phone?: InputMaybe<ModelStringInput>;
  updatedAt?: InputMaybe<ModelStringInput>;
};

export type CreateUserInput = {
  _version?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['AWSDateTime']>;
  email: Scalars['AWSEmail'];
  id?: InputMaybe<Scalars['ID']>;
  name: Scalars['String'];
  phone?: InputMaybe<Scalars['AWSPhone']>;
  updatedAt?: InputMaybe<Scalars['AWSDateTime']>;
};

export type DeleteUserInput = {
  _version?: InputMaybe<Scalars['Int']>;
  id: Scalars['ID'];
};

export type UpdateUserInput = {
  _version?: InputMaybe<Scalars['Int']>;
  createdAt?: InputMaybe<Scalars['AWSDateTime']>;
  email?: InputMaybe<Scalars['AWSEmail']>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['AWSPhone']>;
  updatedAt?: InputMaybe<Scalars['AWSDateTime']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  onCreateUser?: Maybe<User>;
  onDeleteUser?: Maybe<User>;
  onUpdateUser?: Maybe<User>;
};


export type SubscriptionOnCreateUserArgs = {
  filter?: InputMaybe<ModelSubscriptionUserFilterInput>;
  id?: InputMaybe<Scalars['String']>;
};


export type SubscriptionOnDeleteUserArgs = {
  filter?: InputMaybe<ModelSubscriptionUserFilterInput>;
  id?: InputMaybe<Scalars['String']>;
};


export type SubscriptionOnUpdateUserArgs = {
  filter?: InputMaybe<ModelSubscriptionUserFilterInput>;
  id?: InputMaybe<Scalars['String']>;
};

export type ModelSubscriptionUserFilterInput = {
  and?: InputMaybe<Array<InputMaybe<ModelSubscriptionUserFilterInput>>>;
  createdAt?: InputMaybe<ModelSubscriptionStringInput>;
  email?: InputMaybe<ModelSubscriptionStringInput>;
  name?: InputMaybe<ModelSubscriptionStringInput>;
  or?: InputMaybe<Array<InputMaybe<ModelSubscriptionUserFilterInput>>>;
  phone?: InputMaybe<ModelSubscriptionStringInput>;
  updatedAt?: InputMaybe<ModelSubscriptionStringInput>;
};

export type ModelSubscriptionStringInput = {
  beginsWith?: InputMaybe<Scalars['String']>;
  between?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  contains?: InputMaybe<Scalars['String']>;
  eq?: InputMaybe<Scalars['String']>;
  ge?: InputMaybe<Scalars['String']>;
  gt?: InputMaybe<Scalars['String']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  le?: InputMaybe<Scalars['String']>;
  lt?: InputMaybe<Scalars['String']>;
  ne?: InputMaybe<Scalars['String']>;
  notContains?: InputMaybe<Scalars['String']>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export enum AuthProvider {
  ApiKey = 'apiKey',
  Iam = 'iam',
  Oidc = 'oidc',
  UserPools = 'userPools'
}

export type AuthRule = {
  allow: AuthStrategy;
  groupClaim?: InputMaybe<Scalars['String']>;
  groups?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  groupsField?: InputMaybe<Scalars['String']>;
  identityClaim?: InputMaybe<Scalars['String']>;
  operations?: InputMaybe<Array<InputMaybe<ModelOperation>>>;
  ownerField?: InputMaybe<Scalars['String']>;
  provider?: InputMaybe<AuthProvider>;
};

export enum AuthStrategy {
  Groups = 'groups',
  Owner = 'owner',
  Private = 'private',
  Public = 'public'
}

export enum ModelOperation {
  Create = 'create',
  Delete = 'delete',
  Get = 'get',
  List = 'list',
  Listen = 'listen',
  Read = 'read',
  Search = 'search',
  Sync = 'sync',
  Update = 'update'
}

export type HttpHeader = {
  key?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['String']>;
};

export enum HttpMethod {
  Delete = 'DELETE',
  Get = 'GET',
  Patch = 'PATCH',
  Post = 'POST',
  Put = 'PUT'
}

export type ModelBooleanInput = {
  attributeExists?: InputMaybe<Scalars['Boolean']>;
  attributeType?: InputMaybe<ModelAttributeTypes>;
  eq?: InputMaybe<Scalars['Boolean']>;
  ne?: InputMaybe<Scalars['Boolean']>;
};

export type ModelFloatInput = {
  attributeExists?: InputMaybe<Scalars['Boolean']>;
  attributeType?: InputMaybe<ModelAttributeTypes>;
  between?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  eq?: InputMaybe<Scalars['Float']>;
  ge?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  le?: InputMaybe<Scalars['Float']>;
  lt?: InputMaybe<Scalars['Float']>;
  ne?: InputMaybe<Scalars['Float']>;
};

export type ModelIntInput = {
  attributeExists?: InputMaybe<Scalars['Boolean']>;
  attributeType?: InputMaybe<ModelAttributeTypes>;
  between?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  eq?: InputMaybe<Scalars['Int']>;
  ge?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  le?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  ne?: InputMaybe<Scalars['Int']>;
};

export type ModelMutationMap = {
  create?: InputMaybe<Scalars['String']>;
  delete?: InputMaybe<Scalars['String']>;
  update?: InputMaybe<Scalars['String']>;
};

export type ModelQueryMap = {
  get?: InputMaybe<Scalars['String']>;
  list?: InputMaybe<Scalars['String']>;
};

export type ModelSubscriptionBooleanInput = {
  eq?: InputMaybe<Scalars['Boolean']>;
  ne?: InputMaybe<Scalars['Boolean']>;
};

export type ModelSubscriptionFloatInput = {
  between?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  eq?: InputMaybe<Scalars['Float']>;
  ge?: InputMaybe<Scalars['Float']>;
  gt?: InputMaybe<Scalars['Float']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  le?: InputMaybe<Scalars['Float']>;
  lt?: InputMaybe<Scalars['Float']>;
  ne?: InputMaybe<Scalars['Float']>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

export type ModelSubscriptionIdInput = {
  beginsWith?: InputMaybe<Scalars['ID']>;
  between?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  contains?: InputMaybe<Scalars['ID']>;
  eq?: InputMaybe<Scalars['ID']>;
  ge?: InputMaybe<Scalars['ID']>;
  gt?: InputMaybe<Scalars['ID']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  le?: InputMaybe<Scalars['ID']>;
  lt?: InputMaybe<Scalars['ID']>;
  ne?: InputMaybe<Scalars['ID']>;
  notContains?: InputMaybe<Scalars['ID']>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type ModelSubscriptionIntInput = {
  between?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  eq?: InputMaybe<Scalars['Int']>;
  ge?: InputMaybe<Scalars['Int']>;
  gt?: InputMaybe<Scalars['Int']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  le?: InputMaybe<Scalars['Int']>;
  lt?: InputMaybe<Scalars['Int']>;
  ne?: InputMaybe<Scalars['Int']>;
  notIn?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
};

export enum ModelSubscriptionLevel {
  Off = 'off',
  On = 'on',
  Public = 'public'
}

export type ModelSubscriptionMap = {
  level?: InputMaybe<ModelSubscriptionLevel>;
  onCreate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  onDelete?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  onUpdate?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

export enum PredictionsActions {
  ConvertTextToSpeech = 'convertTextToSpeech',
  IdentifyLabels = 'identifyLabels',
  IdentifyText = 'identifyText',
  TranslateText = 'translateText'
}

export type SearchableQueryMap = {
  search?: InputMaybe<Scalars['String']>;
};

export type TimestampConfiguration = {
  createdAt?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['String']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  User: ResolverTypeWrapper<User>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  AWSTimestamp: ResolverTypeWrapper<Scalars['AWSTimestamp']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  AWSDateTime: ResolverTypeWrapper<Scalars['AWSDateTime']>;
  AWSEmail: ResolverTypeWrapper<Scalars['AWSEmail']>;
  String: ResolverTypeWrapper<Scalars['String']>;
  AWSPhone: ResolverTypeWrapper<Scalars['AWSPhone']>;
  ModelUserFilterInput: ModelUserFilterInput;
  ModelStringInput: ModelStringInput;
  ModelAttributeTypes: ModelAttributeTypes;
  ModelSizeInput: ModelSizeInput;
  ModelIDInput: ModelIdInput;
  ModelSortDirection: ModelSortDirection;
  ModelUserConnection: ResolverTypeWrapper<ModelUserConnection>;
  Mutation: ResolverTypeWrapper<{}>;
  ModelUserConditionInput: ModelUserConditionInput;
  CreateUserInput: CreateUserInput;
  DeleteUserInput: DeleteUserInput;
  UpdateUserInput: UpdateUserInput;
  Subscription: ResolverTypeWrapper<{}>;
  ModelSubscriptionUserFilterInput: ModelSubscriptionUserFilterInput;
  ModelSubscriptionStringInput: ModelSubscriptionStringInput;
  AuthProvider: AuthProvider;
  AuthRule: AuthRule;
  AuthStrategy: AuthStrategy;
  ModelOperation: ModelOperation;
  AWSDate: ResolverTypeWrapper<Scalars['AWSDate']>;
  AWSIPAddress: ResolverTypeWrapper<Scalars['AWSIPAddress']>;
  AWSJSON: ResolverTypeWrapper<Scalars['AWSJSON']>;
  AWSTime: ResolverTypeWrapper<Scalars['AWSTime']>;
  AWSURL: ResolverTypeWrapper<Scalars['AWSURL']>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  HttpHeader: HttpHeader;
  HttpMethod: HttpMethod;
  ModelBooleanInput: ModelBooleanInput;
  ModelFloatInput: ModelFloatInput;
  ModelIntInput: ModelIntInput;
  ModelMutationMap: ModelMutationMap;
  ModelQueryMap: ModelQueryMap;
  ModelSubscriptionBooleanInput: ModelSubscriptionBooleanInput;
  ModelSubscriptionFloatInput: ModelSubscriptionFloatInput;
  ModelSubscriptionIDInput: ModelSubscriptionIdInput;
  ModelSubscriptionIntInput: ModelSubscriptionIntInput;
  ModelSubscriptionLevel: ModelSubscriptionLevel;
  ModelSubscriptionMap: ModelSubscriptionMap;
  PredictionsActions: PredictionsActions;
  SearchableQueryMap: SearchableQueryMap;
  TimestampConfiguration: TimestampConfiguration;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  ID: Scalars['ID'];
  User: User;
  Boolean: Scalars['Boolean'];
  AWSTimestamp: Scalars['AWSTimestamp'];
  Int: Scalars['Int'];
  AWSDateTime: Scalars['AWSDateTime'];
  AWSEmail: Scalars['AWSEmail'];
  String: Scalars['String'];
  AWSPhone: Scalars['AWSPhone'];
  ModelUserFilterInput: ModelUserFilterInput;
  ModelStringInput: ModelStringInput;
  ModelSizeInput: ModelSizeInput;
  ModelIDInput: ModelIdInput;
  ModelUserConnection: ModelUserConnection;
  Mutation: {};
  ModelUserConditionInput: ModelUserConditionInput;
  CreateUserInput: CreateUserInput;
  DeleteUserInput: DeleteUserInput;
  UpdateUserInput: UpdateUserInput;
  Subscription: {};
  ModelSubscriptionUserFilterInput: ModelSubscriptionUserFilterInput;
  ModelSubscriptionStringInput: ModelSubscriptionStringInput;
  AuthRule: AuthRule;
  AWSDate: Scalars['AWSDate'];
  AWSIPAddress: Scalars['AWSIPAddress'];
  AWSJSON: Scalars['AWSJSON'];
  AWSTime: Scalars['AWSTime'];
  AWSURL: Scalars['AWSURL'];
  Float: Scalars['Float'];
  HttpHeader: HttpHeader;
  ModelBooleanInput: ModelBooleanInput;
  ModelFloatInput: ModelFloatInput;
  ModelIntInput: ModelIntInput;
  ModelMutationMap: ModelMutationMap;
  ModelQueryMap: ModelQueryMap;
  ModelSubscriptionBooleanInput: ModelSubscriptionBooleanInput;
  ModelSubscriptionFloatInput: ModelSubscriptionFloatInput;
  ModelSubscriptionIDInput: ModelSubscriptionIdInput;
  ModelSubscriptionIntInput: ModelSubscriptionIntInput;
  ModelSubscriptionMap: ModelSubscriptionMap;
  SearchableQueryMap: SearchableQueryMap;
  TimestampConfiguration: TimestampConfiguration;
};

export type AuthDirectiveArgs = {
  rules: Array<AuthRule>;
};

export type AuthDirectiveResolver<Result, Parent, ContextType = any, Args = AuthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_Api_KeyDirectiveArgs = { };

export type Aws_Api_KeyDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_Api_KeyDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_AuthDirectiveArgs = {
  cognito_groups: Array<Scalars['String']>;
};

export type Aws_AuthDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_AuthDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_Cognito_User_PoolsDirectiveArgs = {
  cognito_groups?: Maybe<Array<Scalars['String']>>;
};

export type Aws_Cognito_User_PoolsDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_Cognito_User_PoolsDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_IamDirectiveArgs = { };

export type Aws_IamDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_IamDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_LambdaDirectiveArgs = { };

export type Aws_LambdaDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_LambdaDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_OidcDirectiveArgs = { };

export type Aws_OidcDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_OidcDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type Aws_SubscribeDirectiveArgs = {
  mutations: Array<Scalars['String']>;
};

export type Aws_SubscribeDirectiveResolver<Result, Parent, ContextType = any, Args = Aws_SubscribeDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type BelongsToDirectiveArgs = {
  fields?: Maybe<Array<Scalars['String']>>;
};

export type BelongsToDirectiveResolver<Result, Parent, ContextType = any, Args = BelongsToDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type DefaultDirectiveArgs = {
  value: Scalars['String'];
};

export type DefaultDirectiveResolver<Result, Parent, ContextType = any, Args = DefaultDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type FunctionDirectiveArgs = {
  name: Scalars['String'];
  region?: Maybe<Scalars['String']>;
};

export type FunctionDirectiveResolver<Result, Parent, ContextType = any, Args = FunctionDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type HasManyDirectiveArgs = {
  fields?: Maybe<Array<Scalars['String']>>;
  indexName?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
};

export type HasManyDirectiveResolver<Result, Parent, ContextType = any, Args = HasManyDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type HasOneDirectiveArgs = {
  fields?: Maybe<Array<Scalars['String']>>;
};

export type HasOneDirectiveResolver<Result, Parent, ContextType = any, Args = HasOneDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type HttpDirectiveArgs = {
  headers?: Maybe<Array<Maybe<HttpHeader>>>;
  method?: Maybe<HttpMethod>;
  url: Scalars['String'];
};

export type HttpDirectiveResolver<Result, Parent, ContextType = any, Args = HttpDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type IndexDirectiveArgs = {
  name?: Maybe<Scalars['String']>;
  queryField?: Maybe<Scalars['String']>;
  sortKeyFields?: Maybe<Array<Scalars['String']>>;
};

export type IndexDirectiveResolver<Result, Parent, ContextType = any, Args = IndexDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type KeyDirectiveArgs = {
  fields: Array<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  queryField?: Maybe<Scalars['String']>;
};

export type KeyDirectiveResolver<Result, Parent, ContextType = any, Args = KeyDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ManyToManyDirectiveArgs = {
  limit?: Maybe<Scalars['Int']>;
  relationName: Scalars['String'];
};

export type ManyToManyDirectiveResolver<Result, Parent, ContextType = any, Args = ManyToManyDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type MapsToDirectiveArgs = {
  name: Scalars['String'];
};

export type MapsToDirectiveResolver<Result, Parent, ContextType = any, Args = MapsToDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type ModelDirectiveArgs = {
  mutations?: Maybe<ModelMutationMap>;
  queries?: Maybe<ModelQueryMap>;
  subscriptions?: Maybe<ModelSubscriptionMap>;
  timestamps?: Maybe<TimestampConfiguration>;
};

export type ModelDirectiveResolver<Result, Parent, ContextType = any, Args = ModelDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type PredictionsDirectiveArgs = {
  actions: Array<PredictionsActions>;
};

export type PredictionsDirectiveResolver<Result, Parent, ContextType = any, Args = PredictionsDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type PrimaryKeyDirectiveArgs = {
  sortKeyFields?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PrimaryKeyDirectiveResolver<Result, Parent, ContextType = any, Args = PrimaryKeyDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type SearchableDirectiveArgs = {
  queries?: Maybe<SearchableQueryMap>;
};

export type SearchableDirectiveResolver<Result, Parent, ContextType = any, Args = SearchableDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  getUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryGetUserArgs, 'id'>>;
  listUsers?: Resolver<Maybe<ResolversTypes['ModelUserConnection']>, ParentType, ContextType, Partial<QueryListUsersArgs>>;
  syncUsers?: Resolver<Maybe<ResolversTypes['ModelUserConnection']>, ParentType, ContextType, Partial<QuerySyncUsersArgs>>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  _deleted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  _lastChangedAt?: Resolver<ResolversTypes['AWSTimestamp'], ParentType, ContextType>;
  _version?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['AWSDateTime'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['AWSEmail'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['AWSPhone']>, ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['AWSDateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface AwsTimestampScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSTimestamp'], any> {
  name: 'AWSTimestamp';
}

export interface AwsDateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSDateTime'], any> {
  name: 'AWSDateTime';
}

export interface AwsEmailScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSEmail'], any> {
  name: 'AWSEmail';
}

export interface AwsPhoneScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSPhone'], any> {
  name: 'AWSPhone';
}

export type ModelUserConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ModelUserConnection'] = ResolversParentTypes['ModelUserConnection']> = {
  items?: Resolver<Array<Maybe<ResolversTypes['User']>>, ParentType, ContextType>;
  nextToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startedAt?: Resolver<Maybe<ResolversTypes['AWSTimestamp']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationCreateUserArgs, 'input'>>;
  deleteUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationDeleteUserArgs, 'input'>>;
  updateUser?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationUpdateUserArgs, 'input'>>;
};

export type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = {
  onCreateUser?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "onCreateUser", ParentType, ContextType, Partial<SubscriptionOnCreateUserArgs>>;
  onDeleteUser?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "onDeleteUser", ParentType, ContextType, Partial<SubscriptionOnDeleteUserArgs>>;
  onUpdateUser?: SubscriptionResolver<Maybe<ResolversTypes['User']>, "onUpdateUser", ParentType, ContextType, Partial<SubscriptionOnUpdateUserArgs>>;
};

export interface AwsDateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSDate'], any> {
  name: 'AWSDate';
}

export interface AwsipAddressScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSIPAddress'], any> {
  name: 'AWSIPAddress';
}

export interface AwsjsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSJSON'], any> {
  name: 'AWSJSON';
}

export interface AwsTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSTime'], any> {
  name: 'AWSTime';
}

export interface AwsurlScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['AWSURL'], any> {
  name: 'AWSURL';
}

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  AWSTimestamp?: GraphQLScalarType;
  AWSDateTime?: GraphQLScalarType;
  AWSEmail?: GraphQLScalarType;
  AWSPhone?: GraphQLScalarType;
  ModelUserConnection?: ModelUserConnectionResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  AWSDate?: GraphQLScalarType;
  AWSIPAddress?: GraphQLScalarType;
  AWSJSON?: GraphQLScalarType;
  AWSTime?: GraphQLScalarType;
  AWSURL?: GraphQLScalarType;
};

export type DirectiveResolvers<ContextType = any> = {
  auth?: AuthDirectiveResolver<any, any, ContextType>;
  aws_api_key?: Aws_Api_KeyDirectiveResolver<any, any, ContextType>;
  aws_auth?: Aws_AuthDirectiveResolver<any, any, ContextType>;
  aws_cognito_user_pools?: Aws_Cognito_User_PoolsDirectiveResolver<any, any, ContextType>;
  aws_iam?: Aws_IamDirectiveResolver<any, any, ContextType>;
  aws_lambda?: Aws_LambdaDirectiveResolver<any, any, ContextType>;
  aws_oidc?: Aws_OidcDirectiveResolver<any, any, ContextType>;
  aws_subscribe?: Aws_SubscribeDirectiveResolver<any, any, ContextType>;
  belongsTo?: BelongsToDirectiveResolver<any, any, ContextType>;
  default?: DefaultDirectiveResolver<any, any, ContextType>;
  function?: FunctionDirectiveResolver<any, any, ContextType>;
  hasMany?: HasManyDirectiveResolver<any, any, ContextType>;
  hasOne?: HasOneDirectiveResolver<any, any, ContextType>;
  http?: HttpDirectiveResolver<any, any, ContextType>;
  index?: IndexDirectiveResolver<any, any, ContextType>;
  key?: KeyDirectiveResolver<any, any, ContextType>;
  manyToMany?: ManyToManyDirectiveResolver<any, any, ContextType>;
  mapsTo?: MapsToDirectiveResolver<any, any, ContextType>;
  model?: ModelDirectiveResolver<any, any, ContextType>;
  predictions?: PredictionsDirectiveResolver<any, any, ContextType>;
  primaryKey?: PrimaryKeyDirectiveResolver<any, any, ContextType>;
  searchable?: SearchableDirectiveResolver<any, any, ContextType>;
};
