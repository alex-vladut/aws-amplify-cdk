# This guy put together AppSync custom types here:
# https://gist.github.com/cietho/87463cfa77ffa9917d1b1425e01049bd
scalar AWSDate
scalar AWSTime
scalar AWSDateTime
scalar AWSTimestamp
scalar AWSEmail
scalar AWSJSON
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

# https://github.com/aws-amplify/amplify-cli/blob/45cd9736b5fc09d78a3f445f62fc2a971c11fec7/packages/amplify-appsync-simulator/src/schema/directives/auth.ts#L15
# https://github.com/aws-amplify/amplify-category-api/blob/041fb808e380d04f2c4913cef1037c3d87e98d22/packages/amplify-graphql-transformer-migrator/src/constants/graphql-directives.ts
directive @aws_api_key on FIELD_DEFINITION | OBJECT
directive @aws_iam on FIELD_DEFINITION | OBJECT
directive @aws_oidc on FIELD_DEFINITION | OBJECT
directive @aws_lambda on FIELD_DEFINITION | OBJECT
directive @aws_cognito_user_pools(
  cognito_groups: [String!]
) on FIELD_DEFINITION | OBJECT
directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION
directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION

directive @primaryKey(sortKeyFields: [String]) on FIELD_DEFINITION
directive @model(
  queries: ModelQueryMap
  mutations: ModelMutationMap
  subscriptions: ModelSubscriptionMap
  timestamps: TimestampConfiguration
) on OBJECT
input ModelMutationMap {
  create: String
  update: String
  delete: String
}
input ModelQueryMap {
  get: String
  list: String
}
input ModelSubscriptionMap {
  onCreate: [String]
  onUpdate: [String]
  onDelete: [String]
  level: ModelSubscriptionLevel
}
enum ModelSubscriptionLevel {
  off
  public
  on
}
input TimestampConfiguration {
  createdAt: String
  updatedAt: String
}
directive @function(
  name: String!
  region: String
) repeatable on FIELD_DEFINITION
directive @http(
  method: HttpMethod = GET
  url: String!
  headers: [HttpHeader] = []
) on FIELD_DEFINITION
enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
}
input HttpHeader {
  key: String
  value: String
}
directive @key(
  name: String
  fields: [String!]!
  queryField: String
) repeatable on OBJECT

directive @predictions(actions: [PredictionsActions!]!) on FIELD_DEFINITION
enum PredictionsActions {
  identifyText
  identifyLabels
  convertTextToSpeech
  translateText
}
directive @searchable(queries: SearchableQueryMap) on OBJECT
input SearchableQueryMap {
  search: String
}
directive @auth(rules: [AuthRule!]!) on OBJECT | FIELD_DEFINITION
input AuthRule {
  # Specifies the auth rule's strategy. Allowed values are 'owner', 'groups', 'public', 'private'.
  allow: AuthStrategy!
  # Specifies the name of the provider to use for the rule. This overrides the default provider
  # when 'public' and 'private' AuthStrategy is used. Specifying a provider for 'owner' or 'groups'
  # are not allowed.
  provider: AuthProvider
  # Specifies the name of the claim to look for on the request's JWT token
  # from Cognito User Pools (and in the future OIDC) that contains the identity
  # of the user. If 'allow' is 'groups', this value should point to a list of groups
  # in the claims. If 'allow' is 'owner', this value should point to the logged in user identity string.
  # Defaults to "cognito:username" for Cognito User Pools auth.
  identityClaim: String
  # Allows for custom config of 'groups' which is validated against the JWT
  # Specifies a static list of groups that should have access to the object
  groupClaim: String
  # Allowed when the 'allow' argument is 'owner'.
  # Specifies the field of type String or [String] that contains owner(s) that can access the object.
  ownerField: String # defaults to "owner"
  # Allowed when the 'allow' argument is 'groups'.
  # Specifies the field of type String or [String] that contains group(s) that can access the object.
  groupsField: String
  # Allowed when the 'allow' argument is 'groups'.
  # Specifies a static list of groups that should have access to the object.
  groups: [String]
  # Specifies operations to which this auth rule should be applied.
  operations: [ModelOperation]
}
enum AuthStrategy {
  owner
  groups
  private
  public
}
enum AuthProvider {
  apiKey
  iam
  oidc
  userPools
}
enum ModelOperation {
  create
  update
  delete
  read
  get
  list
  search
  listen
  sync
}

directive @hasOne(fields: [String!]) on FIELD_DEFINITION
directive @hasMany(
  indexName: String
  fields: [String!]
  limit: Int = 100
) on FIELD_DEFINITION
directive @belongsTo(fields: [String!]) on FIELD_DEFINITION
directive @manyToMany(
  relationName: String!
  limit: Int = 100
) on FIELD_DEFINITION
directive @index(
  name: String
  queryField: String
  sortKeyFields: [String!]
) on FIELD_DEFINITION
directive @default(value: String!) on FIELD_DEFINITION

directive @mapsTo(name: String!) on OBJECT
